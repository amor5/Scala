// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package ipo

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[ipo.Foo](node)
val document = scalaxb.toXML[ipo.Foo](obj, "foo", ipo.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Ipo_AddressFormat: scalaxb.XMLFormat[ipo.Address] = new DefaultIpo_AddressFormat {}
  implicit lazy val Ipo_CustomerFormat: scalaxb.XMLFormat[ipo.Customer] = new DefaultIpo_CustomerFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("customer"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ipo.Customer](elem)))
      case (Some("address"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ipo.Address](elem)))

      case _ => None
    }
  }

  trait DefaultIpo_AddressFormat extends scalaxb.ElemNameParser[ipo.Address] {
    val targetNamespace: Option[String] = None
    
    override def typeName: Option[String] = Some("address")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ipo.Address] =
      phrase((scalaxb.ElemName(None, "number")) ~ 
      (scalaxb.ElemName(None, "street")) ~ 
      (scalaxb.ElemName(None, "city")) ~ 
      (scalaxb.ElemName(None, "state")) ~ 
      (scalaxb.ElemName(None, "zip")) ~ 
      (scalaxb.ElemName(None, "country")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      ipo.Address(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: ipo.Address, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.number, None, Some("number"), __scope, false),
        scalaxb.toXML[String](__obj.street, None, Some("street"), __scope, false),
        scalaxb.toXML[String](__obj.city, None, Some("city"), __scope, false),
        scalaxb.toXML[String](__obj.state, None, Some("state"), __scope, false),
        scalaxb.toXML[String](__obj.zip, None, Some("zip"), __scope, false),
        scalaxb.toXML[String](__obj.country, None, Some("country"), __scope, false))

  }

  trait DefaultIpo_CustomerFormat extends scalaxb.ElemNameParser[ipo.Customer] {
    val targetNamespace: Option[String] = None
    
    override def typeName: Option[String] = Some("customer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ipo.Customer] =
      phrase((scalaxb.ElemName(None, "firstname")) ~ 
      (scalaxb.ElemName(None, "lastname")) ~ 
      (scalaxb.ElemName(None, "address")) ~ 
      (scalaxb.ElemName(None, "email")) ~ 
      (scalaxb.ElemName(None, "phone")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      ipo.Customer(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ipo.Address](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ipo.Customer, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ipo.Customer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.firstname, None, Some("firstname"), __scope, false),
        scalaxb.toXML[String](__obj.lastname, None, Some("lastname"), __scope, false),
        scalaxb.toXML[ipo.Address](__obj.address, None, Some("address"), __scope, false),
        scalaxb.toXML[String](__obj.email, None, Some("email"), __scope, false),
        scalaxb.toXML[String](__obj.phone, None, Some("phone"), __scope, false))

  }


}

